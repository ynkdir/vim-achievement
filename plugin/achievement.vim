if exists("g:loaded_achievement")
  finish
endif
let g:loaded_achievement = 1

augroup Plugin_Achievement
  au!
  autocmd BufNew * let s:state['bufnew'] += 1 | call s:update('BufNew')
  autocmd BufReadPost * call s:update('BufReadPost')
  autocmd BufWritePost * let s:state['write'] += 1 | call s:update('BufWritePost')
  autocmd BufWinEnter * call s:update('BufWinEnter')
  autocmd WinEnter * let s:state['winenter'] += 1 | call s:update('WinEnter')
  autocmd CursorHold * call s:update('CursorHold')
  autocmd CursorHoldI * call s:update('CursorHoldI')
augroup END

let s:state = {
      \ 'starttime': localtime(),
      \ 'bufnew': 0,
      \ 'winenter': 0,
      \ 'write': 0,
      \ }

let s:achievements = [
      \ {'key': 'edittime_60',
      \  'cond': 'localtime() - s:state["starttime"] >= 60',
      \  'msg': '1 minute for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_300',
      \  'cond': 'localtime() - s:state["starttime"] >= 300',
      \  'msg': '5 minutes for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_600',
      \  'cond': 'localtime() - s:state["starttime"] >= 600',
      \  'msg': '10 minutes for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_1800',
      \  'cond': 'localtime() - s:state["starttime"] >= 1800',
      \  'msg': '30 minutes for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_3600',
      \  'cond': 'localtime() - s:state["starttime"] >= 3600',
      \  'msg': '1 hour for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_7200',
      \  'cond': 'localtime() - s:state["starttime"] >= 7200',
      \  'msg': '2 hours for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'edittime_10800',
      \  'cond': 'localtime() - s:state["starttime"] >= 10800',
      \  'msg': '3 hours for edit',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_10',
      \  'cond': 'changenr() >= 10',
      \  'msg': '10 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_50',
      \  'cond': 'changenr() >= 50',
      \  'msg': '50 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_100',
      \  'cond': 'changenr() >= 100',
      \  'msg': '100 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_500',
      \  'cond': 'changenr() >= 500',
      \  'msg': '500 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_1000',
      \  'cond': 'changenr() >= 1000',
      \  'msg': '1000 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_2000',
      \  'cond': 'changenr() >= 2000',
      \  'msg': '2000 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_5000',
      \  'cond': 'changenr() >= 5000',
      \  'msg': '5000 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'changenr_10000',
      \  'cond': 'changenr() >= 10000',
      \  'msg': '10000 changes to the buffer',
      \  'event': '\v^%(CursorHold|CursorHoldI)$'},
      \ {'key': 'bufnew_10',
      \  'cond': 's:state["bufnew"] >= 5',
      \  'msg': 'edit 5 buffers',
      \  'event': '\v^%(BufNew)$'},
      \ {'key': 'bufnew_10',
      \  'cond': 's:state["bufnew"] >= 10',
      \  'msg': 'edit 10 buffers',
      \  'event': '\v^%(BufNew)$'},
      \ {'key': 'bufnew_20',
      \  'cond': 's:state["bufnew"] >= 20',
      \  'msg': 'edit 20 buffers',
      \  'event': '\v^%(BufNew)$'},
      \ {'key': 'bufnew_50',
      \  'cond': 's:state["bufnew"] >= 50',
      \  'msg': 'edit 50 buffers',
      \  'event': '\v^%(BufNew)$'},
      \ {'key': 'bufnew_100',
      \  'cond': 's:state["bufnew"] >= 100',
      \  'msg': 'edit 100 buffers',
      \  'event': '\v^%(BufNew)$'},
      \ {'key': 'winenter_10',
      \  'cond': 's:state["winenter"] >= 10',
      \  'msg': 'jump window 10 times',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winenter_20',
      \  'cond': 's:state["winenter"] >= 20',
      \  'msg': 'jump window 20 times',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winenter_50',
      \  'cond': 's:state["winenter"] >= 50',
      \  'msg': 'jump window 50 times',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winenter_100',
      \  'cond': 's:state["winenter"] >= 100',
      \  'msg': 'jump window 100 times',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'write_10',
      \  'cond': 's:state["write"] >= 10',
      \  'msg': 'write file 10 times',
      \  'event': '\v^%(BufWritePost)$'},
      \ {'key': 'write_20',
      \  'cond': 's:state["write"] >= 20',
      \  'msg': 'write file 20 times',
      \  'event': '\v^%(BufWritePost)$'},
      \ {'key': 'write_50',
      \  'cond': 's:state["write"] >= 50',
      \  'msg': 'write file 50 times',
      \  'event': '\v^%(BufWritePost)$'},
      \ {'key': 'write_100',
      \  'cond': 's:state["write"] >= 100',
      \  'msg': 'write file 100 times',
      \  'event': '\v^%(BufWritePost)$'},
      \ {'key': 'edit_vimrc',
      \  'cond': 'fnamemodify(bufname("%"), ":t") == ".vimrc"',
      \  'msg': 'edit .vimrc',
      \  'event': '\v^%(BufWinEnter)$'},
      \ {'key': 'edit_url',
      \  'cond': 'bufname("%") =~ ''^\(http\|https\|ftp\):\/\/''',
      \  'msg': 'edit url',
      \  'event': '\v^%(BufWinEnter)$'},
      \ {'key': 'winnr_3',
      \  'cond': 'winnr("$") >= 3',
      \  'msg': '3 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_5',
      \  'cond': 'winnr("$") >= 5',
      \  'msg': '5 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_10',
      \  'cond': 'winnr("$") >= 10',
      \  'msg': '10 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_20',
      \  'cond': 'winnr("$") >= 20',
      \  'msg': '20 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_30',
      \  'cond': 'winnr("$") >= 30',
      \  'msg': '30 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_40',
      \  'cond': 'winnr("$") >= 40',
      \  'msg': '40 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'winnr_40',
      \  'cond': 'winnr("$") >= 50',
      \  'msg': '50 windows',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'tabpagenr_3',
      \  'cond': 'tabpagenr("$") >= 3',
      \  'msg': '3 tab pages',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'tabpagenr_5',
      \  'cond': 'tabpagenr("$") >= 5',
      \  'msg': '5 tab pages',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'tabpagenr_10',
      \  'cond': 'tabpagenr("$") >= 10',
      \  'msg': '10 tab pages',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'tabpagenr_20',
      \  'cond': 'tabpagenr("$") >= 20',
      \  'msg': '20 tab pages',
      \  'event': '\v^%(WinEnter)$'},
      \ {'key': 'fsize_1k',
      \  'cond': 'getfsize(bufname("%")) >= 1000',
      \  'msg': 'edit 1KB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_10k',
      \  'cond': 'getfsize(bufname("%")) >= 10000',
      \  'msg': 'edit 10KB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_100k',
      \  'cond': 'getfsize(bufname("%")) >= 100000',
      \  'msg': 'edit 100KB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_1m',
      \  'cond': 'getfsize(bufname("%")) >= 1000000',
      \  'msg': 'edit 1MB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_10m',
      \  'cond': 'getfsize(bufname("%")) >= 10000000',
      \  'msg': 'edit 10MB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_100m',
      \  'cond': 'getfsize(bufname("%")) >= 100000000',
      \  'msg': 'edit 100MB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'fsize_1g',
      \  'cond': 'getfsize(bufname("%")) >= 1000000000',
      \  'msg': 'edit 1GB file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'readonly',
      \  'cond': '&readonly',
      \  'msg': 'edit readonly file',
      \  'event': '\v^%(BufReadPost)$'},
      \ {'key': 'encrypt',
      \  'cond': '&key != ""',
      \  'msg': 'edit encrypted file',
      \  'event': '\v^%(BufReadPost)$'},
      \]

let s:unlocked = {}

function! s:update(event)
  if &buftype =~ '\v%(help|quickfix)$'
    return
  endif
  for x in s:achievements
    if a:event =~ x.event && !has_key(s:unlocked, x.key) && eval(x.cond)
      let s:unlocked[x.key] = 1
      call s:notify(printf('ACHIEVEMENT UNLOCKED: %s', x.msg))
    endif
  endfor
endfunction

function! s:notify_echomsg(msg)
  echomsg a:msg
endfunction

function! s:notify_notify_send(msg)
  call system('notify-send ' . shellescape(a:msg))
endfunction

if $DISPLAY != '' && executable('notify-send')
  let s:notify = function('s:notify_notify_send')
else
  let s:notify = function('s:notify_echomsg')
endif
